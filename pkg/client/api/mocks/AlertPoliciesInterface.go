// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/dell/goobjectscale/pkg/client/model"
	mock "github.com/stretchr/testify/mock"
)

// AlertPoliciesInterface is an autogenerated mock type for the AlertPoliciesInterface type
type AlertPoliciesInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: payload
func (_m *AlertPoliciesInterface) Create(payload model.AlertPolicy) (*model.AlertPolicy, error) {
	ret := _m.Called(payload)

	var r0 *model.AlertPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AlertPolicy) (*model.AlertPolicy, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(model.AlertPolicy) *model.AlertPolicy); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AlertPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AlertPolicy) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: policyName
func (_m *AlertPoliciesInterface) Delete(policyName string) error {
	ret := _m.Called(policyName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(policyName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: policyName
func (_m *AlertPoliciesInterface) Get(policyName string) (*model.AlertPolicy, error) {
	ret := _m.Called(policyName)

	var r0 *model.AlertPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AlertPolicy, error)); ok {
		return rf(policyName)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AlertPolicy); ok {
		r0 = rf(policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AlertPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: params
func (_m *AlertPoliciesInterface) List(params map[string]string) (*model.AlertPolicies, error) {
	ret := _m.Called(params)

	var r0 *model.AlertPolicies
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) (*model.AlertPolicies, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) *model.AlertPolicies); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AlertPolicies)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: payload, policyName
func (_m *AlertPoliciesInterface) Update(payload model.AlertPolicy, policyName string) (*model.AlertPolicy, error) {
	ret := _m.Called(payload, policyName)

	var r0 *model.AlertPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AlertPolicy, string) (*model.AlertPolicy, error)); ok {
		return rf(payload, policyName)
	}
	if rf, ok := ret.Get(0).(func(model.AlertPolicy, string) *model.AlertPolicy); ok {
		r0 = rf(payload, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AlertPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AlertPolicy, string) error); ok {
		r1 = rf(payload, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAlertPoliciesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlertPoliciesInterface creates a new instance of AlertPoliciesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlertPoliciesInterface(t mockConstructorTestingTNewAlertPoliciesInterface) *AlertPoliciesInterface {
	mock := &AlertPoliciesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
