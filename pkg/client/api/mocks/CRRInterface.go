// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dell/goobjectscale/pkg/client/model"
	mock "github.com/stretchr/testify/mock"
)

// CRRInterface is an autogenerated mock type for the CRRInterface type
type CRRInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, destObjectScale, destObjectStore, param
func (_m *CRRInterface) Get(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (*model.CRR, error) {
	ret := _m.Called(ctx, destObjectScale, destObjectStore, param)

	var r0 *model.CRR
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) (*model.CRR, error)); ok {
		return rf(ctx, destObjectScale, destObjectStore, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) *model.CRR); ok {
		r0 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CRR)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string) error); ok {
		r1 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseReplication provides a mock function with given fields: ctx, destObjectScale, destObjectStore, param
func (_m *CRRInterface) PauseReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) error {
	ret := _m.Called(ctx, destObjectScale, destObjectStore, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResumeReplication provides a mock function with given fields: ctx, destObjectScale, destObjectStore, param
func (_m *CRRInterface) ResumeReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) error {
	ret := _m.Called(ctx, destObjectScale, destObjectStore, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SuspendReplication provides a mock function with given fields: ctx, destObjectScale, destObjectStore, param
func (_m *CRRInterface) SuspendReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) error {
	ret := _m.Called(ctx, destObjectScale, destObjectStore, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThrottleReplication provides a mock function with given fields: ctx, destObjectScale, destObjectStore, param
func (_m *CRRInterface) ThrottleReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) error {
	ret := _m.Called(ctx, destObjectScale, destObjectStore, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnthrottleReplication provides a mock function with given fields: ctx, destObjectScale, destObjectStore, param
func (_m *CRRInterface) UnthrottleReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) error {
	ret := _m.Called(ctx, destObjectScale, destObjectStore, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) error); ok {
		r0 = rf(ctx, destObjectScale, destObjectStore, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCRRInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCRRInterface creates a new instance of CRRInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCRRInterface(t mockConstructorTestingTNewCRRInterface) *CRRInterface {
	mock := &CRRInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
