// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	api "github.com/dell/goobjectscale/pkg/client/api"
	mock "github.com/stretchr/testify/mock"
)

// ClientSet is an autogenerated mock type for the ClientSet type
type ClientSet struct {
	mock.Mock
}

// AlertPolicies provides a mock function with given fields:
func (_m *ClientSet) AlertPolicies() api.AlertPoliciesInterface {
	ret := _m.Called()

	var r0 api.AlertPoliciesInterface
	if rf, ok := ret.Get(0).(func() api.AlertPoliciesInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.AlertPoliciesInterface)
		}
	}

	return r0
}

// Buckets provides a mock function with given fields:
func (_m *ClientSet) Buckets() api.BucketsInterface {
	ret := _m.Called()

	var r0 api.BucketsInterface
	if rf, ok := ret.Get(0).(func() api.BucketsInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.BucketsInterface)
		}
	}

	return r0
}

// CRR provides a mock function with given fields:
func (_m *ClientSet) CRR() api.CRRInterface {
	ret := _m.Called()

	var r0 api.CRRInterface
	if rf, ok := ret.Get(0).(func() api.CRRInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.CRRInterface)
		}
	}

	return r0
}

// FederatedObjectStores provides a mock function with given fields:
func (_m *ClientSet) FederatedObjectStores() api.FederatedObjectStoresInterface {
	ret := _m.Called()

	var r0 api.FederatedObjectStoresInterface
	if rf, ok := ret.Get(0).(func() api.FederatedObjectStoresInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.FederatedObjectStoresInterface)
		}
	}

	return r0
}

// ObjectMt provides a mock function with given fields:
func (_m *ClientSet) ObjectMt() api.ObjmtInterface {
	ret := _m.Called()

	var r0 api.ObjmtInterface
	if rf, ok := ret.Get(0).(func() api.ObjmtInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ObjmtInterface)
		}
	}

	return r0
}

// ObjectUser provides a mock function with given fields:
func (_m *ClientSet) ObjectUser() api.ObjectUserInterface {
	ret := _m.Called()

	var r0 api.ObjectUserInterface
	if rf, ok := ret.Get(0).(func() api.ObjectUserInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ObjectUserInterface)
		}
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *ClientSet) Status() api.StatusInterface {
	ret := _m.Called()

	var r0 api.StatusInterface
	if rf, ok := ret.Get(0).(func() api.StatusInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.StatusInterface)
		}
	}

	return r0
}

// Tenants provides a mock function with given fields:
func (_m *ClientSet) Tenants() api.TenantsInterface {
	ret := _m.Called()

	var r0 api.TenantsInterface
	if rf, ok := ret.Get(0).(func() api.TenantsInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.TenantsInterface)
		}
	}

	return r0
}

type mockConstructorTestingTNewClientSet interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientSet creates a new instance of ClientSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientSet(t mockConstructorTestingTNewClientSet) *ClientSet {
	mock := &ClientSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
