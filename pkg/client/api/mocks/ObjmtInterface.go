// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dell/goobjectscale/pkg/client/model"
	mock "github.com/stretchr/testify/mock"
)

// ObjmtInterface is an autogenerated mock type for the ObjmtInterface type
type ObjmtInterface struct {
	mock.Mock
}

// GetAccountBillingInfo provides a mock function with given fields: ctx, ids, params
func (_m *ObjmtInterface) GetAccountBillingInfo(ctx context.Context, ids []string, params map[string]string) (*model.AccountBillingInfoList, error) {
	ret := _m.Called(ctx, ids, params)

	var r0 *model.AccountBillingInfoList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) (*model.AccountBillingInfoList, error)); ok {
		return rf(ctx, ids, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) *model.AccountBillingInfoList); ok {
		r0 = rf(ctx, ids, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountBillingInfoList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) error); ok {
		r1 = rf(ctx, ids, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountBillingSample provides a mock function with given fields: ctx, ids, params
func (_m *ObjmtInterface) GetAccountBillingSample(ctx context.Context, ids []string, params map[string]string) (*model.AccountBillingSampleList, error) {
	ret := _m.Called(ctx, ids, params)

	var r0 *model.AccountBillingSampleList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) (*model.AccountBillingSampleList, error)); ok {
		return rf(ctx, ids, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) *model.AccountBillingSampleList); ok {
		r0 = rf(ctx, ids, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountBillingSampleList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) error); ok {
		r1 = rf(ctx, ids, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketBillingInfo provides a mock function with given fields: ctx, account, ids, params
func (_m *ObjmtInterface) GetBucketBillingInfo(ctx context.Context, account string, ids []string, params map[string]string) (*model.BucketBillingInfoList, error) {
	ret := _m.Called(ctx, account, ids, params)

	var r0 *model.BucketBillingInfoList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) (*model.BucketBillingInfoList, error)); ok {
		return rf(ctx, account, ids, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) *model.BucketBillingInfoList); ok {
		r0 = rf(ctx, account, ids, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketBillingInfoList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, map[string]string) error); ok {
		r1 = rf(ctx, account, ids, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketBillingPerf provides a mock function with given fields: ctx, account, ids, params
func (_m *ObjmtInterface) GetBucketBillingPerf(ctx context.Context, account string, ids []string, params map[string]string) (*model.BucketPerfDataList, error) {
	ret := _m.Called(ctx, account, ids, params)

	var r0 *model.BucketPerfDataList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) (*model.BucketPerfDataList, error)); ok {
		return rf(ctx, account, ids, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) *model.BucketPerfDataList); ok {
		r0 = rf(ctx, account, ids, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketPerfDataList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, map[string]string) error); ok {
		r1 = rf(ctx, account, ids, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketBillingSample provides a mock function with given fields: ctx, account, ids, params
func (_m *ObjmtInterface) GetBucketBillingSample(ctx context.Context, account string, ids []string, params map[string]string) (*model.BucketBillingSampleList, error) {
	ret := _m.Called(ctx, account, ids, params)

	var r0 *model.BucketBillingSampleList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) (*model.BucketBillingSampleList, error)); ok {
		return rf(ctx, account, ids, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) *model.BucketBillingSampleList); ok {
		r0 = rf(ctx, account, ids, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketBillingSampleList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, map[string]string) error); ok {
		r1 = rf(ctx, account, ids, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationInfo provides a mock function with given fields: ctx, account, replicationPairs, params
func (_m *ObjmtInterface) GetReplicationInfo(ctx context.Context, account string, replicationPairs [][]string, params map[string]string) (*model.BucketReplicationInfoList, error) {
	ret := _m.Called(ctx, account, replicationPairs, params)

	var r0 *model.BucketReplicationInfoList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, [][]string, map[string]string) (*model.BucketReplicationInfoList, error)); ok {
		return rf(ctx, account, replicationPairs, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, [][]string, map[string]string) *model.BucketReplicationInfoList); ok {
		r0 = rf(ctx, account, replicationPairs, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketReplicationInfoList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [][]string, map[string]string) error); ok {
		r1 = rf(ctx, account, replicationPairs, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationSample provides a mock function with given fields: ctx, account, replicationPairs, params
func (_m *ObjmtInterface) GetReplicationSample(ctx context.Context, account string, replicationPairs [][]string, params map[string]string) (*model.BucketReplicationSampleList, error) {
	ret := _m.Called(ctx, account, replicationPairs, params)

	var r0 *model.BucketReplicationSampleList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, [][]string, map[string]string) (*model.BucketReplicationSampleList, error)); ok {
		return rf(ctx, account, replicationPairs, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, [][]string, map[string]string) *model.BucketReplicationSampleList); ok {
		r0 = rf(ctx, account, replicationPairs, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BucketReplicationSampleList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [][]string, map[string]string) error); ok {
		r1 = rf(ctx, account, replicationPairs, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreBillingInfo provides a mock function with given fields: ctx, params
func (_m *ObjmtInterface) GetStoreBillingInfo(ctx context.Context, params map[string]string) (*model.StoreBillingInfoList, error) {
	ret := _m.Called(ctx, params)

	var r0 *model.StoreBillingInfoList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (*model.StoreBillingInfoList, error)); ok {
		return rf(ctx, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *model.StoreBillingInfoList); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StoreBillingInfoList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreBillingSample provides a mock function with given fields: ctx, params
func (_m *ObjmtInterface) GetStoreBillingSample(ctx context.Context, params map[string]string) (*model.StoreBillingSampleList, error) {
	ret := _m.Called(ctx, params)

	var r0 *model.StoreBillingSampleList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (*model.StoreBillingSampleList, error)); ok {
		return rf(ctx, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *model.StoreBillingSampleList); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StoreBillingSampleList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreReplicationData provides a mock function with given fields: ctx, ids, params
func (_m *ObjmtInterface) GetStoreReplicationData(ctx context.Context, ids []string, params map[string]string) (*model.StoreReplicationDataList, error) {
	ret := _m.Called(ctx, ids, params)

	var r0 *model.StoreReplicationDataList

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) (*model.StoreReplicationDataList, error)); ok {
		return rf(ctx, ids, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, []string, map[string]string) *model.StoreReplicationDataList); ok {
		r0 = rf(ctx, ids, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StoreReplicationDataList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, map[string]string) error); ok {
		r1 = rf(ctx, ids, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewObjmtInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewObjmtInterface creates a new instance of ObjmtInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewObjmtInterface(t mockConstructorTestingTNewObjmtInterface) *ObjmtInterface {
	mock := &ObjmtInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
