// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dell/goobjectscale/pkg/client/model"
	mock "github.com/stretchr/testify/mock"
)

// StatusInterface is an autogenerated mock type for the StatusInterface type
type StatusInterface struct {
	mock.Mock
}

// GetRebuildStatus provides a mock function with given fields: ctx, objStoreName, ssPodName, ssPodNameSpace, level, params
func (_m *StatusInterface) GetRebuildStatus(ctx context.Context, objStoreName string, ssPodName string, ssPodNameSpace string, level string, params map[string]string) (*model.RebuildInfo, error) {
	ret := _m.Called(ctx, objStoreName, ssPodName, ssPodNameSpace, level, params)

	var r0 *model.RebuildInfo

	var r1 error

	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string) (*model.RebuildInfo, error)); ok {
		return rf(ctx, objStoreName, ssPodName, ssPodNameSpace, level, params)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string) *model.RebuildInfo); ok {
		r0 = rf(ctx, objStoreName, ssPodName, ssPodNameSpace, level, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RebuildInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, map[string]string) error); ok {
		r1 = rf(ctx, objStoreName, ssPodName, ssPodNameSpace, level, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStatusInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatusInterface creates a new instance of StatusInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatusInterface(t mockConstructorTestingTNewStatusInterface) *StatusInterface {
	mock := &StatusInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
