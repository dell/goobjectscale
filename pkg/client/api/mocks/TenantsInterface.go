// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/dell/goobjectscale/pkg/client/model"
	mock "github.com/stretchr/testify/mock"
)

// TenantsInterface is an autogenerated mock type for the TenantsInterface type
type TenantsInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: payload
func (_m *TenantsInterface) Create(payload model.TenantCreate) (*model.Tenant, error) {
	ret := _m.Called(payload)

	var r0 *model.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TenantCreate) (*model.Tenant, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(model.TenantCreate) *model.Tenant); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(model.TenantCreate) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name
func (_m *TenantsInterface) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuota provides a mock function with given fields: name
func (_m *TenantsInterface) DeleteQuota(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name, params
func (_m *TenantsInterface) Get(name string, params map[string]string) (*model.Tenant, error) {
	ret := _m.Called(name, params)

	var r0 *model.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) (*model.Tenant, error)); ok {
		return rf(name, params)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string) *model.Tenant); ok {
		r0 = rf(name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuota provides a mock function with given fields: name, params
func (_m *TenantsInterface) GetQuota(name string, params map[string]string) (*model.TenantQuota, error) {
	ret := _m.Called(name, params)

	var r0 *model.TenantQuota
	var r1 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) (*model.TenantQuota, error)); ok {
		return rf(name, params)
	}
	if rf, ok := ret.Get(0).(func(string, map[string]string) *model.TenantQuota); ok {
		r0 = rf(name, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TenantQuota)
		}
	}

	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: params
func (_m *TenantsInterface) List(params map[string]string) (*model.TenantList, error) {
	ret := _m.Called(params)

	var r0 *model.TenantList
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) (*model.TenantList, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) *model.TenantList); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TenantList)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetQuota provides a mock function with given fields: name, payload
func (_m *TenantsInterface) SetQuota(name string, payload model.TenantQuotaSet) error {
	ret := _m.Called(name, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.TenantQuotaSet) error); ok {
		r0 = rf(name, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: payload, name
func (_m *TenantsInterface) Update(payload model.TenantUpdate, name string) error {
	ret := _m.Called(payload, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.TenantUpdate, string) error); ok {
		r0 = rf(payload, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTenantsInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTenantsInterface creates a new instance of TenantsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTenantsInterface(t mockConstructorTestingTNewTenantsInterface) *TenantsInterface {
	mock := &TenantsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
