// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package traced

import (
	"context"

	"github.com/dell/goobjectscale/pkg/client/api"
	"github.com/dell/goobjectscale/pkg/client/model"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// AlertPoliciesInterfaceWithTracing implements api.AlertPoliciesInterface interface instrumented with opentracing spans
type AlertPoliciesInterfaceWithTracing struct {
	api.AlertPoliciesInterface
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewAlertPoliciesInterfaceWithTracing returns AlertPoliciesInterfaceWithTracing
func NewAlertPoliciesInterfaceWithTracing(base api.AlertPoliciesInterface, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) AlertPoliciesInterfaceWithTracing {
	d := AlertPoliciesInterfaceWithTracing{
		AlertPoliciesInterface: base,
		_instance:              instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Create implements api.AlertPoliciesInterface
func (_d AlertPoliciesInterfaceWithTracing) Create(ctx context.Context, payload model.AlertPolicy) (ap1 *model.AlertPolicy, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.AlertPoliciesInterface.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"payload": payload}, map[string]interface{}{
				"ap1": ap1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AlertPoliciesInterface.Create(ctx, payload)
}

// Delete implements api.AlertPoliciesInterface
func (_d AlertPoliciesInterfaceWithTracing) Delete(ctx context.Context, policyName string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.AlertPoliciesInterface.Delete")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"policyName": policyName}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AlertPoliciesInterface.Delete(ctx, policyName)
}

// Get implements api.AlertPoliciesInterface
func (_d AlertPoliciesInterfaceWithTracing) Get(ctx context.Context, policyName string) (ap1 *model.AlertPolicy, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.AlertPoliciesInterface.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"policyName": policyName}, map[string]interface{}{
				"ap1": ap1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AlertPoliciesInterface.Get(ctx, policyName)
}

// List implements api.AlertPoliciesInterface
func (_d AlertPoliciesInterfaceWithTracing) List(ctx context.Context, params map[string]string) (ap1 *model.AlertPolicies, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.AlertPoliciesInterface.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"ap1": ap1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AlertPoliciesInterface.List(ctx, params)
}

// Update implements api.AlertPoliciesInterface
func (_d AlertPoliciesInterfaceWithTracing) Update(ctx context.Context, payload model.AlertPolicy, policyName string) (ap1 *model.AlertPolicy, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.AlertPoliciesInterface.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"payload":    payload,
				"policyName": policyName}, map[string]interface{}{
				"ap1": ap1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.AlertPoliciesInterface.Update(ctx, payload, policyName)
}
