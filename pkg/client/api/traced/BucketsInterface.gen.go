// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package traced

import (
	"context"

	"github.com/dell/goobjectscale/pkg/client/api"
	"github.com/dell/goobjectscale/pkg/client/model"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// BucketsInterfaceWithTracing implements api.BucketsInterface interface instrumented with opentracing spans
type BucketsInterfaceWithTracing struct {
	api.BucketsInterface
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewBucketsInterfaceWithTracing returns BucketsInterfaceWithTracing
func NewBucketsInterfaceWithTracing(base api.BucketsInterface, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) BucketsInterfaceWithTracing {
	d := BucketsInterfaceWithTracing{
		BucketsInterface: base,
		_instance:        instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Create implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) Create(ctx context.Context, createParam model.Bucket) (bp1 *model.Bucket, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"createParam": createParam}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.Create(ctx, createParam)
}

// Delete implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) Delete(ctx context.Context, name string, namespace string, emptyBucket bool) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.Delete")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"name":        name,
				"namespace":   namespace,
				"emptyBucket": emptyBucket}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.Delete(ctx, name, namespace, emptyBucket)
}

// DeletePolicy implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) DeletePolicy(ctx context.Context, bucketName string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.DeletePolicy")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"bucketName": bucketName,
				"param":      param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.DeletePolicy(ctx, bucketName, param)
}

// DeleteQuota implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) DeleteQuota(ctx context.Context, bucketName string, namespace string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.DeleteQuota")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"bucketName": bucketName,
				"namespace":  namespace}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.DeleteQuota(ctx, bucketName, namespace)
}

// Get implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) Get(ctx context.Context, name string, params map[string]string) (bp1 *model.Bucket, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"name":   name,
				"params": params}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.Get(ctx, name, params)
}

// GetPolicy implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) GetPolicy(ctx context.Context, bucketName string, param map[string]string) (s1 string, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.GetPolicy")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"bucketName": bucketName,
				"param":      param}, map[string]interface{}{
				"s1":  s1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.GetPolicy(ctx, bucketName, param)
}

// GetQuota implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) GetQuota(ctx context.Context, bucketName string, namespace string) (bp1 *model.BucketQuotaInfo, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.GetQuota")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"bucketName": bucketName,
				"namespace":  namespace}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.GetQuota(ctx, bucketName, namespace)
}

// List implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) List(ctx context.Context, params map[string]string) (bp1 *model.BucketList, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"bp1": bp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.List(ctx, params)
}

// UpdatePolicy implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) UpdatePolicy(ctx context.Context, bucketName string, policy string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.UpdatePolicy")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"bucketName": bucketName,
				"policy":     policy,
				"param":      param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.UpdatePolicy(ctx, bucketName, policy, param)
}

// UpdateQuota implements api.BucketsInterface
func (_d BucketsInterfaceWithTracing) UpdateQuota(ctx context.Context, bucketQuota model.BucketQuotaUpdate) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.BucketsInterface.UpdateQuota")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":         ctx,
				"bucketQuota": bucketQuota}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.BucketsInterface.UpdateQuota(ctx, bucketQuota)
}
