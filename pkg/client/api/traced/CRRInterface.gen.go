// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package traced

import (
	"context"

	"github.com/dell/goobjectscale/pkg/client/api"
	"github.com/dell/goobjectscale/pkg/client/model"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// CRRInterfaceWithTracing implements api.CRRInterface interface instrumented with opentracing spans
type CRRInterfaceWithTracing struct {
	api.CRRInterface
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewCRRInterfaceWithTracing returns CRRInterfaceWithTracing
func NewCRRInterfaceWithTracing(base api.CRRInterface, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) CRRInterfaceWithTracing {
	d := CRRInterfaceWithTracing{
		CRRInterface: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Get implements api.CRRInterface
func (_d CRRInterfaceWithTracing) Get(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (cp1 *model.CRR, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.CRRInterface.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"destObjectScale": destObjectScale,
				"destObjectStore": destObjectStore,
				"param":           param}, map[string]interface{}{
				"cp1": cp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.CRRInterface.Get(ctx, destObjectScale, destObjectStore, param)
}

// PauseReplication implements api.CRRInterface
func (_d CRRInterfaceWithTracing) PauseReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.CRRInterface.PauseReplication")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"destObjectScale": destObjectScale,
				"destObjectStore": destObjectStore,
				"param":           param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.CRRInterface.PauseReplication(ctx, destObjectScale, destObjectStore, param)
}

// ResumeReplication implements api.CRRInterface
func (_d CRRInterfaceWithTracing) ResumeReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.CRRInterface.ResumeReplication")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"destObjectScale": destObjectScale,
				"destObjectStore": destObjectStore,
				"param":           param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.CRRInterface.ResumeReplication(ctx, destObjectScale, destObjectStore, param)
}

// SuspendReplication implements api.CRRInterface
func (_d CRRInterfaceWithTracing) SuspendReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.CRRInterface.SuspendReplication")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"destObjectScale": destObjectScale,
				"destObjectStore": destObjectStore,
				"param":           param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.CRRInterface.SuspendReplication(ctx, destObjectScale, destObjectStore, param)
}

// ThrottleReplication implements api.CRRInterface
func (_d CRRInterfaceWithTracing) ThrottleReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.CRRInterface.ThrottleReplication")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"destObjectScale": destObjectScale,
				"destObjectStore": destObjectStore,
				"param":           param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.CRRInterface.ThrottleReplication(ctx, destObjectScale, destObjectStore, param)
}

// UnthrottleReplication implements api.CRRInterface
func (_d CRRInterfaceWithTracing) UnthrottleReplication(ctx context.Context, destObjectScale string, destObjectStore string, param map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.CRRInterface.UnthrottleReplication")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":             ctx,
				"destObjectScale": destObjectScale,
				"destObjectStore": destObjectStore,
				"param":           param}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.CRRInterface.UnthrottleReplication(ctx, destObjectScale, destObjectStore, param)
}
