// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package traced

import (
	"context"

	"github.com/dell/goobjectscale/pkg/client/api"
	"github.com/dell/goobjectscale/pkg/client/model"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ObjectUserInterfaceWithTracing implements api.ObjectUserInterface interface instrumented with opentracing spans
type ObjectUserInterfaceWithTracing struct {
	api.ObjectUserInterface
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewObjectUserInterfaceWithTracing returns ObjectUserInterfaceWithTracing
func NewObjectUserInterfaceWithTracing(base api.ObjectUserInterface, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ObjectUserInterfaceWithTracing {
	d := ObjectUserInterfaceWithTracing{
		ObjectUserInterface: base,
		_instance:           instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// CreateSecret implements api.ObjectUserInterface
func (_d ObjectUserInterfaceWithTracing) CreateSecret(ctx context.Context, uid string, req model.ObjectUserSecretKeyCreateReq, params map[string]string) (op1 *model.ObjectUserSecretKeyCreateRes, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.ObjectUserInterface.CreateSecret")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"uid":    uid,
				"req":    req,
				"params": params}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ObjectUserInterface.CreateSecret(ctx, uid, req, params)
}

// DeleteSecret implements api.ObjectUserInterface
func (_d ObjectUserInterfaceWithTracing) DeleteSecret(ctx context.Context, uid string, req model.ObjectUserSecretKeyDeleteReq, params map[string]string) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.ObjectUserInterface.DeleteSecret")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"uid":    uid,
				"req":    req,
				"params": params}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ObjectUserInterface.DeleteSecret(ctx, uid, req, params)
}

// GetInfo implements api.ObjectUserInterface
func (_d ObjectUserInterfaceWithTracing) GetInfo(ctx context.Context, uid string, params map[string]string) (op1 *model.ObjectUserInfo, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.ObjectUserInterface.GetInfo")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"uid":    uid,
				"params": params}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ObjectUserInterface.GetInfo(ctx, uid, params)
}

// GetSecret implements api.ObjectUserInterface
func (_d ObjectUserInterfaceWithTracing) GetSecret(ctx context.Context, uid string, params map[string]string) (op1 *model.ObjectUserSecret, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.ObjectUserInterface.GetSecret")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"uid":    uid,
				"params": params}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ObjectUserInterface.GetSecret(ctx, uid, params)
}

// List implements api.ObjectUserInterface
func (_d ObjectUserInterfaceWithTracing) List(ctx context.Context, params map[string]string) (op1 *model.ObjectUserList, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "api.ObjectUserInterface.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"params": params}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ObjectUserInterface.List(ctx, params)
}
