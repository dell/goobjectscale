// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package traced

import (
	"context"

	"github.com/dell/goobjectscale/pkg/client/rest/client"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// RemoteCallerWithTracing implements client.RemoteCaller interface instrumented with opentracing spans
type RemoteCallerWithTracing struct {
	client.RemoteCaller
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewRemoteCallerWithTracing returns RemoteCallerWithTracing
func NewRemoteCallerWithTracing(base client.RemoteCaller, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) RemoteCallerWithTracing {
	d := RemoteCallerWithTracing{
		RemoteCaller: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// MakeRemoteCall implements client.RemoteCaller
func (_d RemoteCallerWithTracing) MakeRemoteCall(ctx context.Context, r client.Request, into interface{}) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "client.RemoteCaller.MakeRemoteCall")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"r":    r,
				"into": into}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RemoteCaller.MakeRemoteCall(ctx, r, into)
}
